geom_bar()
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
plot_data <- cbind(plot_data, cleaned_data$Category)
ggplot(data = plot_data, aes(`Name of medicine`, Category)) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine', Category)) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine', 'Category')) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine')) +
geom_bar()
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data <- cbind(plot_data, as.factor(cleaned_data$Category))
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
plot_data <- cbind(plot_data, as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(Name = cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(x = Name = cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`, row.names("Name"))
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
plot_data[1:10,]
#make a smaller dataframe for exploratory plotting
plot_data <- cleaned_data$`Name of medicine`
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- data.frame(cleaned_data$`Name of medicine`, colnames("Name"))
#make a smaller dataframe for exploratory plotting
plot_data <- data.frame(cleaned_data$`Name of medicine`)
colnames(plot_data) <- "Name"
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
ggplot(data = plot_data, aes('Category')) +
geom_col()
ggplot(data = plot_data, aes('Category')) +
geom_bar()
ggplot(data = plot_data, aes('Category')) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes('Category')) +
geom_bar(stat = "count") +
theme_classic()
ggplot(data = plot_data) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes('Name')) +
geom_bar() +
theme_classic()
test <- data.frame("Name" = c("Fiona", "Sarina", "Kerlin"), "Call" = c("Y", "Y", "N"))
test <- data.frame("Name" = c("Fiona", "Sarina", "Kerlin"), "Call" = as.factor(c("Y", "Y", "N")))
ggplot(data = test, aes('Name')) +
geom_bar() +
theme_classic()
plot(test)
ggplot(data = test, aes(x = 'Call', fill = colour)) +
geom_bar() +
theme_classic()
ggplot(data = test, aes(x = 'Call', fill = "colour")) +
geom_bar() +
theme_classic()
ggplot(data = test, aes(x = "Call", fill = "Call")) +
geom_bar() +
theme_classic()
library(data.table)
set.seed(12)
DT <- data.table(categories=c('c','a','b','a','a','c','b','b','a','c','c','b'),hello=runif(12,0,15))
reclassification <- c(0,4,7,15)
DT[,colour:=cut(hello,c(-Inf,reclassification,Inf))]
library(ggplot2)
p <- ggplot(DT,aes(x=categories,fill=colour)) + geom_bar()
print(p)
p <- ggplot(test,aes(x=Call,fill=colour)) + geom_bar()
print(p)
p <- ggplot(test,aes(x=Call)) + geom_bar()
print(p)
ggplot(data = plot_data, aes(Name)) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_light() +
labs(title = "Number of medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(aes(label=y), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(aes(label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text()
summary(plot_data$Category)
summary(plot_data$Category)[1]
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(y = label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=0.25)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=1)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=-1)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France_") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "colour") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "grey") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(color = Category) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = "red")) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = Category) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "Category") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "red") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar(fill = "red") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar(fill = "grey") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(aes(color = Category)) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
#now use the full data set
ggplot(cleaned_data,
aes(Category,
fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data,
aes(Category,
fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
plot(FSCtoSSC,pch = 20,
main=files[1]
)
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
length(files)
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
files <- list.files(path = CurrentPath, pattern = "[^FitSpec]\\.csv") # "." is a regular expression for a wildcard single character, had to specify \\ before it to really look for a dot.
files <- list.files(path = CurrentPath, pattern = "[^FitSpec]\\.csv") # "." is a regular expression for a wildcard single character, had to specify \\ before it to really look for a dot.
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/BarplotFitData.R")
source("K:/Universität/Doktorand/AnalysisFACS/PlotFitData.R")
View(FitData)
FitData$channel == "APC.A"
FitData[FitData$channel == "APC.A",]
source("K:/Universität/Doktorand/AnalysisFACS/PlotFitData.R")
#load libraries
library(ggplot2)
library(readxl)
library(stringr)
#load data
raw_data <- read.csv(file = "K:/AlpinInsight/Projekte/Medizindaten/data/fr_Export_medicines_en.csv", sep = ";",  header = T) # From France: http://agence-prd.ansm.sante.fr/php/ecodex/telecharger/telecharger.php
##try importing the excel sheet directly instead of exporting it from Excel to csv. I will need the 'readxl' library for this. Base R can not read excel.
excel_raw_data <- read_excel(path = "K:/AlpinInsight/Projekte/Medizindaten/data/fr_medicines_output_medicines_en.xlsx")
dim(excel_raw_data) #2441 rows and 39 columns
head(excel_raw_data) #lots of NA?
excel_raw_data[1:15,2] #seems that the data starts at row 8 with the column names
clean_excel <- as.data.frame(excel_raw_data[9:dim(excel_raw_data)[1],]) #drop the first 8 rows
colnames(clean_excel) <- excel_raw_data[8,] #write proper column names
summary(clean_excel)
#excel import has much nicer column names. Csv import has mangled names from exporting it out of excel --> use excel
cleaned_data <- clean_excel
#clean column names from '\n' --> I noticed that this will mess with the code!
colnames(cleaned_data) <- str_replace_all(colnames(cleaned_data), "\\n", " ")
#all columns are of character class. Which columns need a different class?
colnames(cleaned_data)
##either as factor (in categories), as date or as numbers
### as factors
cleaned_data$Category <- as.factor(cleaned_data$Category)
cleaned_data$`Medicine status` <- as.factor(cleaned_data$`Medicine status`)
cleaned_data$`Opinion status` <- as.factor(cleaned_data$`Opinion status`)
cleaned_data$`Patient safety` <- as.factor(cleaned_data$`Patient safety`)
cleaned_data$`Pharmacotherapeutic group (human)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (human)`)
cleaned_data$`Pharmacotherapeutic group (veterinary)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (veterinary)`)
cleaned_data$`Accelerated assessment` <- as.factor(cleaned_data$`Accelerated assessment`)
cleaned_data$`Additional monitoring` <- as.factor(cleaned_data$`Additional monitoring`)
cleaned_data$`Advanced therapy` <- as.factor(cleaned_data$`Advanced therapy`)
cleaned_data$Biosimilar <- as.factor(cleaned_data$Biosimilar)
cleaned_data$`Conditional approval` <- as.factor(cleaned_data$`Conditional approval`)
cleaned_data$`Exceptional circumstances` <- as.factor(cleaned_data$`Exceptional circumstances`)
cleaned_data$`Generic or hybrid` <- as.factor(cleaned_data$`Generic or hybrid`) # wonderful, the answer to an or question is either yes or no -.-' Is a yes to hybrid or generic?
cleaned_data$`Orphan medicine` <- as.factor(cleaned_data$`Orphan medicine`)
cleaned_data$`PRIME: priority medicine` <- as.factor(cleaned_data$`PRIME: priority medicine`)
### as date
cleaned_data$`European Commission decision date` <- as.Date(cleaned_data$`European Commission decision date`, format = "%d/%m/%Y")
cleaned_data$`Start of rolling review date` <- as.Date(cleaned_data$`Start of rolling review date`, format = "%d/%m/%Y")
cleaned_data$`Start of evaluation date` <- as.Date(cleaned_data$`Start of evaluation date`, format = "%d/%m/%Y")
cleaned_data$`Opinion adopted date` <- as.Date(cleaned_data$`Opinion adopted date`, format = "%d/%m/%Y")
cleaned_data$`Withdrawal of application date` <- as.Date(cleaned_data$`Withdrawal of application date`, format = "%d/%m/%Y")
cleaned_data$`Marketing authorisation date` <- as.Date(cleaned_data$`Marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Refusal of marketing authorisation date` <- as.Date(cleaned_data$`Refusal of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Withdrawal / expiry / revocation / lapse of marketing authorisation date` <- as.Date(cleaned_data$`Withdrawal / expiry / revocation / lapse of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Suspension of marketing authorisation date` <- as.Date(cleaned_data$`Suspension of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`First published date` <- as.Date(cleaned_data$`First published date`, format = "%d/%m/%Y")
cleaned_data$`Last updated date` <- as.Date(cleaned_data$`Last updated date`, format = "%d/%m/%Y")
# as numeric
cleaned_data$`Revision number` <- as.numeric(cleaned_data$`Revision number`)
#make a smaller dataframe for exploratory plotting
plot_data <- data.frame(cleaned_data$`Name of medicine`)
colnames(plot_data) <- "Name"
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France")
#EMA date
ggplot(cleaned_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 126.65, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(cleaned_data,
aes(`First published date`)) +
geom_histogram(binwidth = 126.65, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#look at all the influenza relevant data
IV_data <-  cleaned_data[grep(cleaned_data$`Therapeutic area (MeSH)`, pattern = "Influenza"),]
#some of the owners have slightly different spelled names --> combine them
Seqirus <- grep(IV_data$`Marketing authorisation developer / applicant / holder`, pattern = "Seqirus")
Glaxo <- grep(IV_data$`Marketing authorisation developer / applicant / holder`, pattern = "Glaxo")
Sanofi <- grep(IV_data$`Marketing authorisation developer / applicant / holder`, pattern = "Sanofi")
IV_data$`Marketing authorisation developer / applicant / holder`[Seqirus] <- "Seqirus"
IV_data$`Marketing authorisation developer / applicant / holder`[Glaxo] <- "GlaxoSmithKline"
IV_data$`Marketing authorisation developer / applicant / holder`[Sanofi] <- "Sanofi Pasteur"
#now reorder by occurence
NewOrder <- rownames(sort(table(IV_data$`Marketing authorisation developer / applicant / holder`), decreasing = T))
ggplot(IV_data,
aes(`Marketing authorisation developer / applicant / holder`,
fill = `Marketing authorisation developer / applicant / holder`)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
scale_x_discrete(limits = NewOrder) + #this defines the order, values follow suit automatically
theme_classic() +
labs(title = "Influenza medicines per owner") +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1, face = "bold"),
legend.position = "none")
#first published
ggplot(IV_data,
aes(`First published date`)) +
geom_histogram(binwidth = 126.65, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 126.65, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 50, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 500, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 300, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 365, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 365, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Influenza Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
grep(cleaned_data$`Therapeutic area (MeSH)`, pattern = "Influenza")
grep(cleaned_data$`Therapeutic area (MeSH)`, pattern = "vaccine")
#all columns are of character class. Which columns need a different class?
colnames(cleaned_data)
IV_data$`ATC code (human)`
grep(IV_data$`ATC code (human)`, pattern = "J07")
cleaned_data$`Name of medicine`[grep(cleaned_data$`ATC code (human)`, pattern = "J07")]
#all the vaccines
Vac_data <- cleaned_data[grep(cleaned_data$`ATC code (human)`, pattern = "J07"),]
ggplot(Vac_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 365, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Influenza Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
#first published
ggplot(IV_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 365, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Influenza Medicines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
ggplot(Vac_data,
aes(`European Commission decision date`)) +
geom_histogram(binwidth = 365, color = "black", fill = "steelblue") +
theme_classic() +
labs(title = "Vaccines in France") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
scale_x_date(breaks = "years", date_labels =  "%Y")
