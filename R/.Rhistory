colnames(clean_excel)
##Category, Medicine status, opinion status
cleaned_data$`Therapeutic area (MeSH)`[1:5]
##Category, Medicine status, opinion status
head(cleaned_data$Category)
##Category, Medicine status, opinion status
cleaned_data$Category <- as.factor(cleaned_data$Category)
typeof(cleaned_data$Category)
classof(cleaned_data$Category)
head(cleaned_data$Category)
head(cleaned_data$`Medicine status`)
cleaned_data$`Medicine status` <- as.factor(cleaned_data$`Medicine status`)
head(cleaned_data$`Medicine status`)
cleaned_data$`Opinion status` <- as.factor(cleaned_data$`Opinion status`)
head(cleaned_data$`opinion status`)
cleaned_data$`Opinion status` <- as.factor(cleaned_data$`Opinion status`)
head(cleaned_data$`opinion status`)
head(cleaned_data$`Opinion status`)
cleaned_data$`Opinion status`[1:20]
cleaned_data$`Opinion status`[100:150]
is.na(cleaned_data$`Opinion status`[100:120])
#all columns are of character type. Which columns need a different class?
colnames(clean_excel)
head(cleaned_data$`Latest procedure affecting product information`)
head(cleaned_data$`International non-proprietary name (INN) / common name`)
head(cleaned_data$`Name of medicine`)
head(cleaned_data$`Active substance`)
head(cleaned_data$`Species (veterinary)`
head(cleaned_data$`Species (veterinary)`
)
head(cleaned_data$`Species (veterinary)`)
head(cleaned_data$`Species(veterinary)`)
head(cleaned_data$`Species
(veterinary)`)
head(cleaned_data$`Species (veterinary)`)
head(cleaned_data$`Species(veterinary)`)
head(cleaned_data$`Species
(veterinary)`)
head(cleaned_data$`Species
+     (veterinary)`)
head(cleaned_data$`Species
(veterinary)`)
#all columns are of character type. Which columns need a different class?
colnames(clean_excel)
library(stringr)
#clean col names from '\n' --> that will mess with the code!
str_replace_all(colnames(cleaned_data), "\\\\n", " ")
#clean col names from '\n' --> that will mess with the code!
str_replace_all(colnames(cleaned_data), "\\n", " ")
#clean col names from '\n' --> that will mess with the code!
colnames(cleaned_data) <- str_replace_all(colnames(cleaned_data), "\\n", " ")
head(cleaned_data$`Species
(veterinary)`)
head(cleaned_data$`Species (veterinary)`)
cleaned_data$`Species (veterinary)`[100:150]
cleaned_data$`Species (veterinary)`[1:100]
cleaned_data$`Species (veterinary)`[150:200]
cleaned_data$`Species (veterinary)`[150:250]
cleaned_data$`Species (veterinary)` <- as.factor(cleaned_data$`Species (veterinary)`)
head(cleaned_data$`Species (veterinary)`)
cleaned_data$`Species (veterinary)` <- as.character(cleaned_data$`Species (veterinary)`)
head(cleaned_data$`Species (veterinary)`)
head(cleaned_data$`Patient safety`)
cleaned_data$`Patient safety` <- as.factor(cleaned_data$`Patient safety`)
head(cleaned_data$`Patient safety`)
head(cleaned_data$`ATC code (human)`)
head(cleaned_data$`ATCvet code (veterinary)`)
cleaned_data$`ATCvet code (veterinary)`[150:250]
cleaned_data$`ATC code (human)`[150:250]
head(cleaned_data$`Pharmacotherapeutic group (human)`)
cleaned_data$`Pharmacotherapeutic group (human)`[150:250]
cleaned_data$`Pharmacotherapeutic group (human)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (human)`)
head(cleaned_data$`Pharmacotherapeutic group (human)`)
cleaned_data$`Pharmacotherapeutic group (veterinary)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (veterinary)`)
head(cleaned_data$`Pharmacotherapeutic group (veterinary)`)
head(cleaned_data$`Therapeutic indication`)
#clean up trainling blanc space in 'Therapeutic indication'
cleaned_data$`Therapeutic indication` <- str_replace_all(cleaned_data$`Therapeutic indication`, "  ", "")
head(cleaned_data$`Therapeutic indication`)
#clean up trainling blanc space in 'Therapeutic indication'
cleaned_data$`Therapeutic indication` <- str_replace_all(cleaned_data$`Therapeutic indication`, "\t", "")
head(cleaned_data$`Therapeutic indication`)
cleaned_data$`Therapeutic indication`[6]
cleaned_data$`Therapeutic indication`[5:6]
cleaned_data$`Therapeutic indication`[5:7]
cleaned_data$`Therapeutic indication`[4:7]
cleaned_data$`Therapeutic indication`[1:7]
cleaned_data$`Therapeutic indication`[1]
cleaned_data$`Therapeutic indication`[1:3]
cat(cleaned_data$`Therapeutic indication`[1:3])
print(cleaned_data$`Therapeutic indication`[1:3])
summary(cleaned_data$`Therapeutic indication`[1:3])
#clean up trailing blank space in 'Therapeutic indication'
cleaned_data$`Therapeutic indication` <- str_trim(cleaned_data$`Therapeutic indication`)
head(cleaned_data$`Therapeutic indication`)
#clean up trailing blank space in 'Therapeutic indication'
cleaned_data$`Therapeutic indication` <- str_squish(cleaned_data$`Therapeutic indication`)
head(cleaned_data$`Therapeutic indication`)
head(cleaned_data$`Accelerated assessment`)
cleaned_data$`Accelerated assessment` <- as.factor(cleaned_data$`Accelerated assessment`)
head(cleaned_data$`Accelerated assessment`)
head(cleaned_data$`Additional monitoring`)
head(cleaned_data$`Advanced therapy`)
cleaned_data$`Advanced therapy` <- as.factor(cleaned_data$`Advanced therapy`)
cleaned_data$`Additional monitoring` <- as.factor(cleaned_data$`Additional monitoring`)
head(cleaned_data$Biosimilar)
cleaned_data$Biosimilar <- as.factor(cleaned_data$Biosimilar)
head(cleaned_data$`Conditional approval`)
cleaned_data$`Conditional approval` <- as.factor(cleaned_data$`Conditional approval`)
head(cleaned_data$`Conditional approval`)
head(cleaned_data$`Exceptional circumstances`)
cleaned_data$`Exceptional circumstances` <- as.factor(cleaned_data$`Exceptional circumstances`)
head(cleaned_data$`Exceptional circumstances`)
head(cleaned_data$`Generic or hybrid`)
cleaned_data$`Generic or hybrid` <- as.factor(cleaned_data$`Generic or hybrid`)
head(cleaned_data$`Generic or hybrid`)
head(cleaned_data$`Orphan medicine`)
cleaned_data$`Orphan medicine` <- as.factor(cleaned_data$`Orphan medicine`)
head(cleaned_data$`Orphan medicine`)
head(cleaned_data$`PRIME: priority medicine`)
cleaned_data$`PRIME: priority medicine` <- as.factor(cleaned_data$`PRIME: priority medicine`)
head(cleaned_data$`PRIME: priority medicine`)
head(cleaned_data$`Marketing authorisation developer / applicant / holder`)
head(cleaned_data$`European Commission decision date`)
### as date
cleaned_data$`European Commission decision date` <- as.Date(cleaned_data$`European Commission decision date`)
head(cleaned_data$`European Commission decision date`)
#excel import has much nicer column names. Csv import has mangled names from exporting it out of excel --> use excel
cleaned_data <- clean_excel
#clean col names from '\n' --> that will mess with the code!
colnames(cleaned_data) <- str_replace_all(colnames(cleaned_data), "\\n", " ")
#all columns are of character type. Which columns need a different class?
colnames(cleaned_data)
##Category, Medicine status, opinion status, Patient safety, Pharmacotherapeutic group (human), Pharmacotherapeutic group (veterinary), Accelerated assessment, Additional monitoring, Advanced therapy, Biosimilar, Conditional approval, Exceptional circumstances, Generic or hybrid, Orphan medicine, PRIME: priority medicine
### as factors
cleaned_data$Category <- as.factor(cleaned_data$Category)
cleaned_data$`Medicine status` <- as.factor(cleaned_data$`Medicine status`)
cleaned_data$`Opinion status` <- as.factor(cleaned_data$`Opinion status`)
cleaned_data$`Patient safety` <- as.factor(cleaned_data$`Patient safety`)
cleaned_data$`Pharmacotherapeutic group (human)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (human)`)
cleaned_data$`Pharmacotherapeutic group (veterinary)` <- as.factor(cleaned_data$`Pharmacotherapeutic group (veterinary)`)
cleaned_data$`Accelerated assessment` <- as.factor(cleaned_data$`Accelerated assessment`)
cleaned_data$`Additional monitoring` <- as.factor(cleaned_data$`Additional monitoring`)
cleaned_data$`Advanced therapy` <- as.factor(cleaned_data$`Advanced therapy`)
cleaned_data$Biosimilar <- as.factor(cleaned_data$Biosimilar)
cleaned_data$`Conditional approval` <- as.factor(cleaned_data$`Conditional approval`)
cleaned_data$`Exceptional circumstances` <- as.factor(cleaned_data$`Exceptional circumstances`)
cleaned_data$`Generic or hybrid` <- as.factor(cleaned_data$`Generic or hybrid`) # wonderful, the answer to an or question is either yes or no -.-' Is a yes to hybrid or generic?
cleaned_data$`Orphan medicine` <- as.factor(cleaned_data$`Orphan medicine`)
cleaned_data$`PRIME: priority medicine` <- as.factor(cleaned_data$`PRIME: priority medicine`)
as.character.Date(cleaned_data$`European Commission decision date`[1:5])
typeof(as.character.Date(cleaned_data$`European Commission decision date`[1:5]))
typeof(as.Date(cleaned_data$`European Commission decision date`[1:5]))
summary(as.Date(cleaned_data$`European Commission decision date`[1:5]))
summary(as.Date.character(cleaned_data$`European Commission decision date`[1:5]))
summary(as.Date(cleaned_data$`European Commission decision date`[1:5], format = %d/%m/%Y))
summary(as.Date(cleaned_data$`European Commission decision date`[1:5], format = "%d/%m/%Y"))
class(as.Date(cleaned_data$`European Commission decision date`[1:5], format = "%d/%m/%Y"))
class(data_cleaned$Category) #Is character. I want it to be factor
### as date
cleaned_data$`European Commission decision date` <- as.Date(cleaned_data$`European Commission decision date`, format = "%d/%m/%Y")
head(cleaned_data$`European Commission decision date`)
head(cleaned_data$`Revision number`)
### as date
cleaned_data$`European Commission decision date` <- as.Date(cleaned_data$`European Commission decision date`, format = "%d/%m/%Y")
cleaned_data$`Start of rolling review date` <- as.Date(cleaned_data$`Start of rolling review date`, format = "%d/%m/%Y")
cleaned_data$`Start of evaluation date` <- as.Date(cleaned_data$`Start of evaluation date`, format = "%d/%m/%Y")
cleaned_data$`Opinion adopted date` <- as.Date(cleaned_data$`Opinion adopted date`, format = "%d/%m/%Y")
cleaned_data$`Withdrawal of application date` <- as.Date(cleaned_data$`Withdrawal of application date`, format = "%d/%m/%Y")
cleaned_data$`Marketing authorisation date` <- as.Date(cleaned_data$`Marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Refusal of marketing authorisation date` <- as.Date(cleaned_data$`Refusal of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Withdrawal / expiry / revocation / lapse of marketing authorisation date` <- as.Date(cleaned_data$`Withdrawal / expiry / revocation / lapse of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`Suspension of marketing authorisation date` <- as.Date(cleaned_data$`Suspension of marketing authorisation date`, format = "%d/%m/%Y")
cleaned_data$`First published date` <- as.Date(cleaned_data$`First published date`, format = "%d/%m/%Y")
cleaned_data$`Last updated date` <- as.Date(cleaned_data$`Last updated date`, format = "%d/%m/%Y")
# as numeric
cleaned_data$`Revision number` <- as.numeric(cleaned_data$`Revision number`)
head(cleaned_data$`Revision number`)
head(cleaned_data$`Medicine URL`)
class(cleaned_data$`Therapeutic indication`)
#make a smaller dataframe for exploratory plotting
plot_data <- cleaned_data$`Name of medicine`
plot_data <- cbind(plot_data, cleaned_data$Category)
ggplot(data = plot_data, aes(`Name of medicine`, Category)) +
geom_bar()
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
plot_data <- cbind(plot_data, cleaned_data$Category)
ggplot(data = plot_data, aes(`Name of medicine`, Category)) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine', Category)) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine', 'Category')) +
geom_bar()
ggplot(data = plot_data, aes('Name of medicine')) +
geom_bar()
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data <- cbind(plot_data, as.factor(cleaned_data$Category))
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
plot_data <- cbind(plot_data, as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(Name = cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(x = Name = cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`, row.names("Name"))
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
plot_data[1:10,]
#make a smaller dataframe for exploratory plotting
plot_data <- cleaned_data$`Name of medicine`
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
#make a smaller dataframe for exploratory plotting
plot_data <- as.data.frame(cleaned_data$`Name of medicine`)
#make a smaller dataframe for exploratory plotting
plot_data <- data.frame(cleaned_data$`Name of medicine`, colnames("Name"))
#make a smaller dataframe for exploratory plotting
plot_data <- data.frame(cleaned_data$`Name of medicine`)
colnames(plot_data) <- "Name"
plot_data <- cbind(plot_data, Category = as.factor(cleaned_data$Category))
ggplot(data = plot_data, aes('Category')) +
geom_bar()
plot_data[1:10,]
ggplot(data = plot_data, aes('Category')) +
geom_col()
ggplot(data = plot_data, aes('Category')) +
geom_bar()
ggplot(data = plot_data, aes('Category')) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes('Category')) +
geom_bar(stat = "count") +
theme_classic()
ggplot(data = plot_data) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes('Name')) +
geom_bar() +
theme_classic()
test <- data.frame("Name" = c("Fiona", "Sarina", "Kerlin"), "Call" = c("Y", "Y", "N"))
test <- data.frame("Name" = c("Fiona", "Sarina", "Kerlin"), "Call" = as.factor(c("Y", "Y", "N")))
ggplot(data = test, aes('Name')) +
geom_bar() +
theme_classic()
plot(test)
ggplot(data = test, aes(x = 'Call', fill = colour)) +
geom_bar() +
theme_classic()
ggplot(data = test, aes(x = 'Call', fill = "colour")) +
geom_bar() +
theme_classic()
ggplot(data = test, aes(x = "Call", fill = "Call")) +
geom_bar() +
theme_classic()
library(data.table)
set.seed(12)
DT <- data.table(categories=c('c','a','b','a','a','c','b','b','a','c','c','b'),hello=runif(12,0,15))
reclassification <- c(0,4,7,15)
DT[,colour:=cut(hello,c(-Inf,reclassification,Inf))]
library(ggplot2)
p <- ggplot(DT,aes(x=categories,fill=colour)) + geom_bar()
print(p)
p <- ggplot(test,aes(x=Call,fill=colour)) + geom_bar()
print(p)
p <- ggplot(test,aes(x=Call)) + geom_bar()
print(p)
ggplot(data = plot_data, aes(Name)) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic()
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_light() +
labs(title = "Number of medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(aes(label=y), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(aes(label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text()
summary(plot_data$Category)
summary(plot_data$Category)[1]
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(y = label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=Category), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=0)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=0.25)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=1)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust=-1)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Number of medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France_") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5)
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "colour") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "grey") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(color = Category) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = "red")) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = Category) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "Category") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(fill = "red") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar(fill = "red") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar(fill = "grey") +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, color = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category)) +
geom_bar(aes(color = Category)) +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data, aes(Category, fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France") +
#now use the full data set
ggplot(cleaned_data,
aes(Category,
fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
ggplot(data = plot_data, aes(Category)) +
geom_bar() +
theme_classic() +
labs(title = "Medicines in France")
#now use the full data set
ggplot(cleaned_data,
aes(Category,
fill = Category)) +
geom_bar() +
geom_text(stat = "count",
aes(label=..count..), vjust= -0.5) +
theme_classic() +
labs(title = "Medicines in France")
plot(FSCtoSSC,pch = 20,
main=files[1]
)
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
length(files)
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
files <- list.files(path = CurrentPath, pattern = "[^FitSpec]\\.csv") # "." is a regular expression for a wildcard single character, had to specify \\ before it to really look for a dot.
files <- list.files(path = CurrentPath, pattern = "[^FitSpec]\\.csv") # "." is a regular expression for a wildcard single character, had to specify \\ before it to really look for a dot.
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/AnalyzeAndFit4color.R")
source("K:/Universität/Doktorand/AnalysisFACS/BarplotFitData.R")
source("K:/Universität/Doktorand/AnalysisFACS/PlotFitData.R")
View(FitData)
FitData$channel == "APC.A"
FitData[FitData$channel == "APC.A",]
source("K:/Universität/Doktorand/AnalysisFACS/PlotFitData.R")
